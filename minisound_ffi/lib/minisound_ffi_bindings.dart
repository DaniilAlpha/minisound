// ignore_for_file: camel_case_types
// ignore_for_file: prefer_double_quotes
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: prefer_expression_function_bodies
// ignore_for_file: sort_constructors_first
// ignore_for_file: unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for minisound.h
class MinisoundFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MinisoundFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MinisoundFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<Engine> engine_alloc() {
    return _engine_alloc();
  }

  late final _engine_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Engine> Function()>>(
          'engine_alloc');
  late final _engine_alloc =
      _engine_allocPtr.asFunction<ffi.Pointer<Engine> Function()>();

  int engine_init(
    ffi.Pointer<Engine> self,
    int period_ms,
  ) {
    return _engine_init(
      self,
      period_ms,
    );
  }

  late final _engine_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Engine>, ffi.Uint32)>>('engine_init');
  late final _engine_init =
      _engine_initPtr.asFunction<int Function(ffi.Pointer<Engine>, int)>();

  void engine_uninit(
    ffi.Pointer<Engine> self,
  ) {
    return _engine_uninit(
      self,
    );
  }

  late final _engine_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Engine>)>>(
          'engine_uninit');
  late final _engine_uninit =
      _engine_uninitPtr.asFunction<void Function(ffi.Pointer<Engine>)>();

  int engine_start(
    ffi.Pointer<Engine> self,
  ) {
    return _engine_start(
      self,
    );
  }

  late final _engine_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Engine>)>>(
          'engine_start');
  late final _engine_start =
      _engine_startPtr.asFunction<int Function(ffi.Pointer<Engine>)>();

  int engine_load_sound_ex(
    ffi.Pointer<Engine> self,
    ffi.Pointer<Sound> sound,
    ffi.Pointer<ffi.Void> data,
    int data_size,
    int format,
    int sample_rate,
    int channels,
  ) {
    return _engine_load_sound_ex(
      self,
      sound,
      data,
      data_size,
      format,
      sample_rate,
      channels,
    );
  }

  late final _engine_load_sound_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Engine>,
              ffi.Pointer<Sound>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32)>>('engine_load_sound_ex');
  late final _engine_load_sound_ex = _engine_load_sound_exPtr.asFunction<
      int Function(ffi.Pointer<Engine>, ffi.Pointer<Sound>,
          ffi.Pointer<ffi.Void>, int, int, int, int)>();

  ffi.Pointer<Sound> sound_alloc() {
    return _sound_alloc();
  }

  late final _sound_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Sound> Function()>>('sound_alloc');
  late final _sound_alloc =
      _sound_allocPtr.asFunction<ffi.Pointer<Sound> Function()>();

  int sound_init(
    ffi.Pointer<Sound> self,
    ffi.Pointer<ffi.Void> data,
    int data_size,
    ffi.Pointer<ffi.Void> dec_config,
    ffi.Pointer<ffi.Void> engine,
  ) {
    return _sound_init(
      self,
      data,
      data_size,
      dec_config,
      engine,
    );
  }

  late final _sound_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Sound>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('sound_init');
  late final _sound_init = _sound_initPtr.asFunction<
      int Function(ffi.Pointer<Sound>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void sound_unload(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_unload(
      self,
    );
  }

  late final _sound_unloadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Sound>)>>(
          'sound_unload');
  late final _sound_unload =
      _sound_unloadPtr.asFunction<void Function(ffi.Pointer<Sound>)>();

  int sound_play(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_play(
      self,
    );
  }

  late final _sound_playPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Sound>)>>(
          'sound_play');
  late final _sound_play =
      _sound_playPtr.asFunction<int Function(ffi.Pointer<Sound>)>();

  int sound_replay(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_replay(
      self,
    );
  }

  late final _sound_replayPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Sound>)>>(
          'sound_replay');
  late final _sound_replay =
      _sound_replayPtr.asFunction<int Function(ffi.Pointer<Sound>)>();

  void sound_pause(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_pause(
      self,
    );
  }

  late final _sound_pausePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Sound>)>>(
          'sound_pause');
  late final _sound_pause =
      _sound_pausePtr.asFunction<void Function(ffi.Pointer<Sound>)>();

  void sound_stop(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_stop(
      self,
    );
  }

  late final _sound_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Sound>)>>(
          'sound_stop');
  late final _sound_stop =
      _sound_stopPtr.asFunction<void Function(ffi.Pointer<Sound>)>();

  double sound_get_volume(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_get_volume(
      self,
    );
  }

  late final _sound_get_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<Sound>)>>(
          'sound_get_volume');
  late final _sound_get_volume =
      _sound_get_volumePtr.asFunction<double Function(ffi.Pointer<Sound>)>();

  void sound_set_volume(
    ffi.Pointer<Sound> self,
    double value,
  ) {
    return _sound_set_volume(
      self,
      value,
    );
  }

  late final _sound_set_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Sound>, ffi.Float)>>(
      'sound_set_volume');
  late final _sound_set_volume = _sound_set_volumePtr
      .asFunction<void Function(ffi.Pointer<Sound>, double)>();

  double sound_get_duration(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_get_duration(
      self,
    );
  }

  late final _sound_get_durationPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<Sound>)>>(
          'sound_get_duration');
  late final _sound_get_duration =
      _sound_get_durationPtr.asFunction<double Function(ffi.Pointer<Sound>)>();

  bool sound_get_is_looped(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_get_is_looped(
      self,
    );
  }

  late final _sound_get_is_loopedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<Sound>)>>(
          'sound_get_is_looped');
  late final _sound_get_is_looped =
      _sound_get_is_loopedPtr.asFunction<bool Function(ffi.Pointer<Sound>)>();

  void sound_set_looped(
    ffi.Pointer<Sound> self,
    bool value,
    int delay_ms,
  ) {
    return _sound_set_looped(
      self,
      value,
      delay_ms,
    );
  }

  late final _sound_set_loopedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Sound>, ffi.Bool, ffi.Size)>>('sound_set_looped');
  late final _sound_set_looped = _sound_set_loopedPtr
      .asFunction<void Function(ffi.Pointer<Sound>, bool, int)>();

  ffi.Pointer<Recorder> recorder_create() {
    return _recorder_create();
  }

  late final _recorder_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Recorder> Function()>>(
          'recorder_create');
  late final _recorder_create =
      _recorder_createPtr.asFunction<ffi.Pointer<Recorder> Function()>();

  int recorder_init_file(
    ffi.Pointer<Recorder> recorder,
    ffi.Pointer<ffi.Char> filename,
    int sampleRate,
    int channels,
    int format,
  ) {
    return _recorder_init_file(
      recorder,
      filename,
      sampleRate,
      channels,
      format,
    );
  }

  late final _recorder_init_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
            ffi.Pointer<Recorder>,
            ffi.Pointer<ffi.Char>,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Int32,
          )>>('recorder_init_file');
  late final _recorder_init_file = _recorder_init_filePtr.asFunction<
      int Function(
        ffi.Pointer<Recorder>,
        ffi.Pointer<ffi.Char>,
        int,
        int,
        int,
      )>();

  int recorder_init_stream(
    ffi.Pointer<Recorder> recorder,
    int sampleRate,
    int channels,
    int format,
    double bufferDurationSeconds,
  ) {
    return _recorder_init_stream(
      recorder,
      sampleRate,
      channels,
      format,
      bufferDurationSeconds,
    );
  }

  late final _recorder_init_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
            ffi.Pointer<Recorder>,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Int32,
            ffi.Float,
          )>>('recorder_init_stream');
  late final _recorder_init_stream = _recorder_init_streamPtr.asFunction<
      int Function(
        ffi.Pointer<Recorder>,
        int,
        int,
        int,
        double,
      )>();

  int recorder_start(
    ffi.Pointer<Recorder> recorder,
  ) {
    return _recorder_start(
      recorder,
    );
  }

  late final _recorder_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Recorder>)>>(
          'recorder_start');
  late final _recorder_start =
      _recorder_startPtr.asFunction<int Function(ffi.Pointer<Recorder>)>();

  int recorder_stop(
    ffi.Pointer<Recorder> recorder,
  ) {
    return _recorder_stop(
      recorder,
    );
  }

  late final _recorder_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Recorder>)>>(
          'recorder_stop');
  late final _recorder_stop =
      _recorder_stopPtr.asFunction<int Function(ffi.Pointer<Recorder>)>();

  bool recorder_is_recording(
    ffi.Pointer<Recorder> recorder,
  ) {
    return _recorder_is_recording(
      recorder,
    );
  }

  late final _recorder_is_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<Recorder>)>>(
          'recorder_is_recording');
  late final _recorder_is_recording = _recorder_is_recordingPtr
      .asFunction<bool Function(ffi.Pointer<Recorder>)>();

  int recorder_get_buffer(
    ffi.Pointer<Recorder> recorder,
    ffi.Pointer<ffi.Float> output,
    int frames_to_read,
  ) {
    return _recorder_get_buffer(
      recorder,
      output,
      frames_to_read,
    );
  }

  late final _recorder_get_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Recorder>, ffi.Pointer<ffi.Uint8>,
              ffi.Int32)>>('recorder_get_buffer');
  late final _recorder_get_buffer = _recorder_get_bufferPtr.asFunction<
      int Function(ffi.Pointer<Recorder>, ffi.Pointer<ffi.Uint8>, int)>();

  void recorder_destroy(
    ffi.Pointer<Recorder> recorder,
  ) {
    return _recorder_destroy(
      recorder,
    );
  }

  late final _recorder_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Recorder>)>>(
          'recorder_destroy');
  late final _recorder_destroy =
      _recorder_destroyPtr.asFunction<void Function(ffi.Pointer<Recorder>)>();

  ffi.Pointer<Wave> wave_create() {
    return _wave_create();
  }

  late final _wave_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Wave> Function()>>('wave_create');
  late final _wave_create =
      _wave_createPtr.asFunction<ffi.Pointer<Wave> Function()>();

  void wave_destroy(
    ffi.Pointer<Wave> wave,
  ) {
    return _wave_destroy(
      wave,
    );
  }

  late final _wave_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Wave>)>>(
          'wave_destroy');
  late final _wave_destroy =
      _wave_destroyPtr.asFunction<void Function(ffi.Pointer<Wave>)>();

  int wave_init(
    ffi.Pointer<Wave> wave,
    int type,
    double frequency,
    double amplitude,
    int sample_rate,
  ) {
    return _wave_init(
      wave,
      type,
      frequency,
      amplitude,
      sample_rate,
    );
  }

  late final _wave_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Wave>, ffi.Int32, ffi.Double,
              ffi.Double, ffi.Uint32)>>('wave_init');
  late final _wave_init = _wave_initPtr
      .asFunction<int Function(ffi.Pointer<Wave>, int, double, double, int)>();

  int wave_set_type(
    ffi.Pointer<Wave> wave,
    int type,
  ) {
    return _wave_set_type(
      wave,
      type,
    );
  }

  late final _wave_set_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Wave>, ffi.Int32)>>(
      'wave_set_type');
  late final _wave_set_type =
      _wave_set_typePtr.asFunction<int Function(ffi.Pointer<Wave>, int)>();

  int wave_set_frequency(
    ffi.Pointer<Wave> wave,
    double frequency,
  ) {
    return _wave_set_frequency(
      wave,
      frequency,
    );
  }

  late final _wave_set_frequencyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<Wave>, ffi.Double)>>(
      'wave_set_frequency');
  late final _wave_set_frequency = _wave_set_frequencyPtr
      .asFunction<int Function(ffi.Pointer<Wave>, double)>();

  int wave_set_amplitude(
    ffi.Pointer<Wave> wave,
    double amplitude,
  ) {
    return _wave_set_amplitude(
      wave,
      amplitude,
    );
  }

  late final _wave_set_amplitudePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<Wave>, ffi.Double)>>(
      'wave_set_amplitude');
  late final _wave_set_amplitude = _wave_set_amplitudePtr
      .asFunction<int Function(ffi.Pointer<Wave>, double)>();

  int wave_set_sample_rate(
    ffi.Pointer<Wave> wave,
    int sample_rate,
  ) {
    return _wave_set_sample_rate(
      wave,
      sample_rate,
    );
  }

  late final _wave_set_sample_ratePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<Wave>, ffi.Uint32)>>(
      'wave_set_sample_rate');
  late final _wave_set_sample_rate = _wave_set_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<Wave>, int)>();

  int wave_read(
    ffi.Pointer<Wave> wave,
    ffi.Pointer<ffi.Float> output,
    int frames_to_read,
  ) {
    return _wave_read(
      wave,
      output,
      frames_to_read,
    );
  }

  late final _wave_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Wave>, ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('wave_read');
  late final _wave_read = _wave_readPtr.asFunction<
      int Function(ffi.Pointer<Wave>, ffi.Pointer<ffi.Float>, int)>();
}

final class Engine extends ffi.Opaque {}

abstract class Result {
  static const int Ok = 0;
  static const int UnknownErr = 1;
  static const int OutOfMemErr = 2;
  static const int RangeErr = 3;
  static const int HashCollisionErr = 4;
  static const int FileUnavailableErr = 5;
  static const int FileReadingErr = 6;
  static const int FileWritingErr = 7;
  static const int FormatErr = 8;
  static const int ArgErr = 9;
  static const int StateErr = 10;
  static const int RESULT_COUNT = 11;
}

final class Sound extends ffi.Opaque {}

final class Recorder extends ffi.Opaque {}

abstract class RecorderResult {
  static const int RECORDER_OK = 0;
  static const int RECORDER_ERROR_UNKNOWN = 1;
  static const int RECORDER_ERROR_OUT_OF_MEMORY = 2;
  static const int RECORDER_ERROR_INVALID_ARGUMENT = 3;
  static const int RECORDER_ERROR_ALREADY_RECORDING = 4;
  static const int RECORDER_ERROR_NOT_RECORDING = 5;
}

final class Wave extends ffi.Opaque {}

abstract class WaveResult {
  static const int WAVE_OK = 0;
  static const int WAVE_ERROR = 1;
}

abstract class WaveType {
  static const int WAVE_TYPE_SINE = 0;
  static const int WAVE_TYPE_SQUARE = 1;
  static const int WAVE_TYPE_TRIANGLE = 2;
  static const int WAVE_TYPE_SAWTOOTH = 3;
}
