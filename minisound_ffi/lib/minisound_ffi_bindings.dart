// ignore_for_file: camel_case_types
// ignore_for_file: prefer_double_quotes
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: prefer_expression_function_bodies
// ignore_for_file: sort_constructors_first

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for minisound.h
class MinisoundFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MinisoundFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MinisoundFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<Engine> engine_alloc() {
    return _engine_alloc();
  }

  late final _engine_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Engine> Function()>>(
          'engine_alloc');
  late final _engine_alloc =
      _engine_allocPtr.asFunction<ffi.Pointer<Engine> Function()>();

  int engine_init(
    ffi.Pointer<Engine> self,
    int period_ms,
  ) {
    return _engine_init(
      self,
      period_ms,
    );
  }

  late final _engine_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Engine>, ffi.Uint32)>>('engine_init');
  late final _engine_init =
      _engine_initPtr.asFunction<int Function(ffi.Pointer<Engine>, int)>();

  void engine_uninit(
    ffi.Pointer<Engine> self,
  ) {
    return _engine_uninit(
      self,
    );
  }

  late final _engine_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Engine>)>>(
          'engine_uninit');
  late final _engine_uninit =
      _engine_uninitPtr.asFunction<void Function(ffi.Pointer<Engine>)>();

  int engine_start(
    ffi.Pointer<Engine> self,
  ) {
    return _engine_start(
      self,
    );
  }

  late final _engine_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Engine>)>>(
          'engine_start');
  late final _engine_start =
      _engine_startPtr.asFunction<int Function(ffi.Pointer<Engine>)>();

  ffi.Pointer<Sound> engine_load_sound(
    ffi.Pointer<Engine> self,
    ffi.Pointer<ffi.Void> data,
    int data_size,
  ) {
    return _engine_load_sound(
      self,
      data,
      data_size,
    );
  }

  late final _engine_load_soundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Sound> Function(ffi.Pointer<Engine>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('engine_load_sound');
  late final _engine_load_sound = _engine_load_soundPtr.asFunction<
      ffi.Pointer<Sound> Function(
          ffi.Pointer<Engine>, ffi.Pointer<ffi.Void>, int)>();

  void sound_unload(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_unload(
      self,
    );
  }

  late final _sound_unloadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Sound>)>>(
          'sound_unload');
  late final _sound_unload =
      _sound_unloadPtr.asFunction<void Function(ffi.Pointer<Sound>)>();

  int sound_play(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_play(
      self,
    );
  }

  late final _sound_playPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Sound>)>>(
          'sound_play');
  late final _sound_play =
      _sound_playPtr.asFunction<int Function(ffi.Pointer<Sound>)>();

  void sound_pause(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_pause(
      self,
    );
  }

  late final _sound_pausePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Sound>)>>(
          'sound_pause');
  late final _sound_pause =
      _sound_pausePtr.asFunction<void Function(ffi.Pointer<Sound>)>();

  void sound_stop(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_stop(
      self,
    );
  }

  late final _sound_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Sound>)>>(
          'sound_stop');
  late final _sound_stop =
      _sound_stopPtr.asFunction<void Function(ffi.Pointer<Sound>)>();

  double sound_get_volume(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_get_volume(
      self,
    );
  }

  late final _sound_get_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<Sound>)>>(
          'sound_get_volume');
  late final _sound_get_volume =
      _sound_get_volumePtr.asFunction<double Function(ffi.Pointer<Sound>)>();

  void sound_set_volume(
    ffi.Pointer<Sound> self,
    double value,
  ) {
    return _sound_set_volume(
      self,
      value,
    );
  }

  late final _sound_set_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Sound>, ffi.Float)>>(
      'sound_set_volume');
  late final _sound_set_volume = _sound_set_volumePtr
      .asFunction<void Function(ffi.Pointer<Sound>, double)>();

  double sound_get_duration(
    ffi.Pointer<Sound> self,
  ) {
    return _sound_get_duration(
      self,
    );
  }

  late final _sound_get_durationPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<Sound>)>>(
          'sound_get_duration');
  late final _sound_get_duration =
      _sound_get_durationPtr.asFunction<double Function(ffi.Pointer<Sound>)>();
}

final class Engine extends ffi.Opaque {}

final class Sound extends ffi.Opaque {}

abstract class Result {
  static const int Ok = 0;
  static const int Error = 1;
}
